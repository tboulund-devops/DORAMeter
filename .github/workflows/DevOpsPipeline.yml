name: DevOpsPipeline

on:
  push:
    branches:
      - main
  workflow_dispatch: 
    
jobs:
  integration:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

#      - name: Cache docker images for test # The cache action can check for the existence of the cache before running steps that require those dependencies. It will restore the cache first if it exists, so subsequent steps that need those files (e.g., installing dependencies or building) can be skipped or speeded up.
#        uses: actions/cache@v3
#        with:
#          path: /tmp/test-images.tar
#          key: test-images
#
#      - name: Pull docker images for test if not cached
#        run: |
#          if [ ! -f /tmp/test-images.tar ]; then
#            echo "Image not found in cache, pulling from Docker Hub..."
#            docker pull mariadb:11.5
#            docker pull mcr.microsoft.com/dotnet/sdk:8.0
#            docker pull flyway/flyway:10
#            docker save -o /tmp/test-images.tar mariadb:11.5 mcr.microsoft.com/dotnet/sdk:8.0 flyway/flyway:10
#          else
#            echo "Image found in cache, loading from cache..."
#            docker load -i /tmp/test-images.tar
#          fi
        
      - name: Run integration tests
        run: docker compose run --rm integration-test
        
#      - name: Execute static code analysis
#        uses: sonarsource/sonarqube-quality-gate-action@master # Fails if quality gates are not met - if no quality gates wanted use sonarsource/sonarqube-scan-action@v3 in stead
#        env:
#          SONAR_TOKEN: sqp_be41d4cb66ef65a91427fd51e0e47d21f1b2913b # TODO: Move to secret
#          SONAR_HOST_URL: ${{ vars.SERVER_IP }}:9000
        
  delivery:
    needs: integration
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # The user who initiated the workflow
          password: ${{ secrets.GITHUB_TOKEN }} # Automatically assigned by GitHub Actions

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/tboulund-devops/dora-meter-api -f src/API/Dockerfile .
          docker push ghcr.io/tboulund-devops/dora-meter-api
          
  deployment:
    runs-on: self-hosted
    needs: delivery
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
          
      - name: Update through WatchTower
        run: | # Notice the $ in front of the variable - it's neccessary because we're in a string
          curl -H "Authorization: Bearer TEMPTOKEN" http://${{ vars.SERVER_IP }}:8888/v1/update
      
      - name: Update databases with Flyway
        run: |
          docker run --rm \
            -v ${{ GITHUB.WORKSPACE }}/db:/flyway/sql \
            -e FLYWAY_URL=jdbc:mariadb://${{ vars.SERVER_IP }}:3306/dora_meter \
            -e FLYWAY_USER=dbadmin \
            -e FLYWAY_PASSWORD=TogetherCenterExceptThusFew \
            flyway/flyway migrate